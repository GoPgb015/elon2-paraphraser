import fitz  # PyMuPDF for PDF text extraction
from fastapi import FastAPI, UploadFile, File, Request, HTTPException, Form
from fastapi.responses import JSONResponse
from fastapi.templating import Jinja2Templates
from time import time
import random
import uvicorn

# Initialize FastAPI app and templates
app = FastAPI()
templates = Jinja2Templates(directory="templates")

# Full enhanced synonym dictionary with grammar words
synonym_dict = {
    # AI and Technology
    'artificial intelligence': ['AI', 'machine intelligence', 'automated intelligence', 'smart technology', 'cognitive system', 'intelligent automation', 'AI system'],
    'ai': ['artificial intelligence', 'machine learning', 'automated system', 'intelligent tech', 'AI technology', 'smart tech', 'digital intelligence'],
    'virtual influencers': ['AI influencers', 'digital influencers', 'computer-generated influencers', 'virtual personalities', 'AI avatars', 'digital personas', 'cyber influencers'],
    'ai-generated': ['AI-created', 'machine-generated', 'automated', 'AI-produced', 'computer-crafted', 'AI-made', 'generated by AI'],
    'online advertising': ['digital advertising', 'internet marketing', 'web-based promotion', 'online promotion', 'digital campaign', 'e-advertising', 'virtual marketing'],
    'digital marketing': ['online marketing', 'internet advertising', 'web marketing', 'digital promotion', 'e-marketing', 'virtual advertising', 'cyber marketing'],
    'technology': ['innovation', 'tech', 'advancement', 'system', 'automation', 'digital tool', 'modern solution'],
    'automation': ['automatic process', 'robotics', 'mechanization', 'auto-system', 'streamlining', 'self-operation', 'auto-process'],
    'software': ['program', 'application', 'tool', 'code', 'platform', 'app', 'system'],
    'machine learning': ['AI learning', 'data learning', 'algorithmic learning', 'predictive modeling', 'learning system', 'ML', 'automated learning'],
    'algorithm': ['method', 'procedure', 'system', 'formula', 'process', 'logic', 'calculation'],
    'digital': ['online', 'virtual', 'cyber', 'electronic', 'internet-based', 'e-based', 'web'],

    # Consumer Behavior
    'consumers': ['customers', 'users', 'buyers', 'audience', 'clients', 'shoppers', 'patrons', 'end-users'],
    'consumer behavior': ['user behavior', 'buyer actions', 'customer tendencies', 'purchase patterns', 'consumer habits', 'shopping behavior', 'user actions'],
    'trust': ['confidence', 'reliability', 'belief', 'faith', 'credibility', 'assurance', 'dependability'],
    'authenticity': ['genuineness', 'realness', 'sincerity', 'truthfulness', 'originality', 'legitimacy', 'veracity'],
    'engagement': ['interaction', 'involvement', 'participation', 'connection', 'activity', 'commitment', 'attention'],
    'purchase intentions': ['buying intentions', 'intent to purchase', 'willingness to buy', 'shopping intent', 'purchase desire', 'buying interest', 'consumer intent'],
    'preferences': ['likes', 'tastes', 'choices', 'inclinations', 'favoritism', 'selections', 'priorities'],
    'choices': ['options', 'selections', 'decisions', 'preferences', 'alternatives', 'picks', 'electives'],
    'satisfaction': ['contentment', 'pleasure', 'fulfillment', 'happiness', 'approval', 'gratification', 'delight'],
    'behavior': ['actions', 'conduct', 'habits', 'manner', 'response', 'activity', 'tendencies'],
    'perception': ['view', 'opinion', 'understanding', 'perspective', 'impression', 'awareness', 'interpretation'],
    'credibility': ['trustworthiness', 'reliability', 'authenticity', 'believability', 'legitimacy', 'validity', 'integrity'],

    # Marketing and Advertising
    'advertisements': ['ads', 'promotions', 'commercials', 'adverts', 'campaigns', 'notices', 'announcements'],
    'ads': ['advertisements', 'promotions', 'notices', 'commercials', 'banners', 'spots', 'placements'],
    'influencers': ['endorsers', 'promoters', 'content creators', 'advocates', 'ambassadors', 'marketers', 'spokespeople'],
    'human influencers': ['real influencers', 'traditional influencers', 'live influencers', 'human promoters', 'authentic endorsers', 'real-life advocates', 'organic promoters'],
    'marketing campaigns': ['advertising campaigns', 'promotional efforts', 'marketing strategies', 'ad initiatives', 'brand campaigns', 'promotional drives', 'marketing projects'],
    'brand': ['company', 'label', 'firm', 'business', 'identity', 'trademark', 'name'],
    'content': ['material', 'information', 'media', 'message', 'copy', 'data', 'text'],
    'promotion': ['advertising', 'publicity', 'boost', 'endorsement', 'push', 'marketing', 'advancement'],
    'campaign': ['drive', 'effort', 'initiative', 'movement', 'project', 'operation', 'program'],
    'message': ['communication', 'statement', 'announcement', 'note', 'word', 'info', 'content'],
    'strategy': ['plan', 'approach', 'method', 'tactic', 'scheme', 'blueprint', 'technique'],
    'social media': ['online platforms', 'digital networks', 'social networks', 'media channels', 'web platforms', 'online communities', 'virtual spaces'],
    'buying behavior': ['purchase behavior', 'shopping habits', 'consumer actions', 'buyer tendencies', 'purchasing patterns', 'client behavior'],

    # Cultural Context
    'cultural': ['societal', 'traditional', 'ethnic', 'cultural', 'heritage', 'social', 'regional'],
    'india': ['Indian market', 'Indian context', 'South Asian market', 'Indian region', 'subcontinent', 'Indian landscape', 'Indian setting'],
    'indian consumers': ['consumers in India', 'Indian audience', 'South Asian buyers', 'Indian clientele', 'local users', 'Indian shoppers', 'Indian buyers'],
    'cultural values': ['traditional values', 'societal norms', 'ethnic principles', 'cultural beliefs', 'heritage ideals', 'social standards', 'regional ethics'],
    'emotional bonding': ['emotional connection', 'personal attachment', 'affective bond', 'emotional tie', 'heartfelt link', 'sentimental bond', 'deep connection'],
    'tradition': ['custom', 'practice', 'ritual', 'heritage', 'convention', 'legacy', 'culture'],
    'community': ['society', 'group', 'population', 'network', 'collective', 'neighborhood', 'circle'],
    'relationship': ['bond', 'connection', 'association', 'link', 'tie', 'rapport', 'kinship'],

    # Research Terms
    'research': ['study', 'investigation', 'analysis', 'exploration', 'inquiry', 'examination', 'probe'],
    'study': ['research', 'examination', 'inquiry', 'survey', 'review', 'investigation', 'analysis'],
    'analysis': ['evaluation', 'assessment', 'review', 'breakdown', 'interpretation', 'scrutiny', 'examination'],
    'quantitative': ['numerical', 'statistical', 'data-driven', 'quantifiable', 'metric-based', 'measurable', 'analytic'],
    'qualitative': ['descriptive', 'exploratory', 'interpretive', 'narrative', 'subjective', 'detailed', 'observational'],
    'data': ['information', 'statistics', 'findings', 'figures', 'records', 'details', 'evidence'],
    'findings': ['results', 'outcomes', 'insights', 'conclusions', 'discoveries', 'observations', 'data'],
    'attitudes': ['perceptions', 'opinions', 'views', 'mindsets', 'beliefs', 'feelings', 'sentiments'],
    'experiment': ['test', 'trial', 'study', 'research', 'probe', 'investigation', 'exploration'],
    'survey': ['poll', 'questionnaire', 'feedback', 'study', 'inquiry', 'review', 'assessment'],
    'conclusion': ['result', 'finding', 'outcome', 'deduction', 'judgment', 'decision', 'resolution'],
    'method': ['approach', 'technique', 'procedure', 'strategy', 'system', 'practice', 'process'],
    'theory': ['concept', 'idea', 'principle', 'framework', 'model', 'hypothesis', 'notion'],

    # Effectiveness and Impact
    'effective': ['successful', 'efficient', 'impactful', 'productive', 'potent', 'useful', 'powerful'],
    'impact': ['effect', 'influence', 'consequence', 'impression', 'significance', 'result', 'force'],
    'influence': ['impact', 'effect', 'sway', 'control', 'power', 'authority', 'persuasion'],
    'effectiveness': ['efficacy', 'success', 'performance', 'potency', 'efficiency', 'capability', 'strength'],
    'performance': ['effectiveness', 'efficacy', 'results', 'output', 'achievement', 'productivity', 'success'],
    'efficacy': ['effectiveness', 'success', 'capability', 'potency', 'efficiency', 'power', 'strength'],
    'outcome': ['result', 'consequence', 'effect', 'product', 'end', 'output', 'aftermath'],
    'benefit': ['advantage', 'gain', 'profit', 'value', 'reward', 'perk', 'asset'],
    'result': ['outcome', 'conclusion', 'effect', 'finding', 'product', 'consequence', 'achievement'],

    # Challenges and Concerns
    'issues': ['problems', 'challenges', 'concerns', 'difficulties', 'complications', 'troubles', 'matters'],
    'challenges': ['issues', 'obstacles', 'hurdles', 'difficulties', 'barriers', 'complications', 'problems'],
    'ethical': ['moral', 'principled', 'righteous', 'honest', 'virtuous', 'just', 'fair'],
    'transparency': ['openness', 'clarity', 'disclosure', 'honesty', 'visibility', 'candor', 'frankness'],
    'disclosure': ['transparency', 'revelation', 'openness', 'admission', 'exposure', 'confession', 'acknowledgment'],
    'trust issues': ['confidence problems', 'reliability concerns', 'distrust', 'credibility issues', 'faith concerns', 'belief challenges', 'reliability doubts'],
    'difficulty': ['challenge', 'problem', 'obstacle', 'hurdle', 'complication', 'trouble', 'issue'],
    'risk': ['danger', 'hazard', 'threat', 'peril', 'uncertainty', 'gamble', 'jeopardy'],
    'ethics': ['morality', 'principles', 'values', 'integrity', 'standards', 'honor', 'virtue'],

    # Emotions
    'love': ['affection', 'care', 'adoration', 'fondness', 'devotion', 'passion', 'attachment'],
    'hate': ['dislike', 'aversion', 'loathing', 'disdain', 'detest', 'abhorrence', 'resentment'],
    'happy': ['joyful', 'glad', 'cheerful', 'delighted', 'pleased', 'content', 'elated'],
    'sad': ['unhappy', 'sorrowful', 'miserable', 'downcast', 'depressed', 'gloomy', 'melancholy'],
    'angry': ['mad', 'furious', 'irritated', 'annoyed', 'enraged', 'upset', 'frustrated'],
    'scared': ['afraid', 'frightened', 'terrified', 'nervous', 'anxious', 'worried', 'alarmed'],

    # Actions
    'run': ['dash', 'sprint', 'jog', 'hurry', 'rush', 'race', 'flee'],
    'walk': ['stroll', 'stride', 'amble', 'saunter', 'step', 'march', 'tread'],
    'talk': ['speak', 'chat', 'converse', 'discuss', 'communicate', 'gossip', 'share'],
    'write': ['compose', 'draft', 'pen', 'jot', 'scribe', 'record', 'note'],
    'read': ['peruse', 'study', 'scan', 'browse', 'examine', 'view', 'absorb'],
    'think': ['ponder', 'reflect', 'consider', 'muse', 'contemplate', 'reason', 'imagine'],
    'eat': ['consume', 'dine', 'munch', 'devour', 'feast', 'nibble', 'taste'],
    'drink': ['sip', 'gulp', 'quaff', 'swallow', 'imbibe', 'hydrate', 'chug'],
    'use': ['utilize', 'employ', 'apply', 'operate', 'engage', 'handle', 'deploy'],
    'want': ['desire', 'wish', 'need', 'seek', 'request', 'crave', 'long for'],

    # Places
    'city': ['town', 'metropolis', 'urban area', 'municipality', 'capital', 'settlement', 'locale'],
    'village': ['hamlet', 'settlement', 'community', 'small town', 'rural area', 'outpost', 'neighborhood'],
    'house': ['home', 'residence', 'dwelling', 'abode', 'building', 'cottage', 'mansion'],
    'school': ['education', 'academy', 'institute', 'college', 'classroom', 'learning center', 'university'],
    'park': ['garden', 'playground', 'reserve', 'green space', 'recreation area', 'nature spot', 'public space'],
    'store': ['shop', 'market', 'retail outlet', 'boutique', 'mall', 'grocery', 'vendor'],

    # Concepts
    'idea': ['concept', 'thought', 'notion', 'plan', 'suggestion', 'proposal', 'vision'],
    'plan': ['strategy', 'scheme', 'project', 'blueprint', 'design', 'agenda', 'intention'],
    'problem': ['issue', 'challenge', 'difficulty', 'trouble', 'concern', 'obstacle', 'hurdle'],
    'solution': ['answer', 'resolution', 'fix', 'remedy', 'result', 'outcome', 'key'],
    'goal': ['aim', 'objective', 'target', 'purpose', 'intention', 'mission', 'ambition'],

    # Adverbs
    'quickly': ['rapidly', 'swiftly', 'fast', 'promptly', 'speedily', 'hastily', 'briskly'],
    'slowly': ['gradually', 'leisurely', 'deliberately', 'steadily', 'calmly', 'lazily', 'easily'],
    'well': ['good', 'nicely', 'properly', 'effectively', 'successfully', 'smoothly', 'efficiently'],
    'badly': ['poorly', 'terribly', 'awfully', 'inadequately', 'unsuccessfully', 'horribly', 'wrongly'],
    'often': ['frequently', 'regularly', 'commonly', 'usually', 'repeatedly', 'habitually', 'continuously'],

    # Prepositions
    'with': ['using', 'alongside', 'together with', 'by means of', 'in company of', 'including', 'among'],
    'for': ['to', 'towards', 'on behalf of', 'in favor of', 'intended for', 'aimed at', 'because of'],
    'in': ['within', 'inside', 'into', 'at', 'during', 'throughout', 'amid'],
    'on': ['upon', 'over', 'atop', 'above', 'onto', 'across', 'along'],
    'about': ['regarding', 'concerning', 'on', 'around', 'related to', 'pertaining to', 'involving'],
    'to': ['towards', 'for', 'into', 'unto', 'in order to', 'so as to', 'with regard to'],
    'from': ['since', 'out of', 'originating at', 'away from', 'beginning with', 'derived from', 'starting at'],

    # Conjunctions
    'and': ['plus', 'also', 'in addition', 'together with', 'as well as', 'along with', 'furthermore'],
    'but': ['however', 'yet', 'nevertheless', 'still', 'though', 'on the other hand', 'nonetheless'],
    'or': ['alternatively', 'otherwise', 'either', 'or else', 'instead', 'in lieu of', 'alternately'],
    'because': ['since', 'as', 'due to', 'for the reason that', 'owing to', 'on account of', 'in view of'],
    'so': ['therefore', 'thus', 'hence', 'consequently', 'accordingly', 'as a result', 'for that reason'],
    'if': ['provided that', 'in case', 'whether', 'assuming that', 'supposing', 'on condition that', 'granted that'],

    # Articles
    'a': ['an', 'one', 'a single', 'some', 'any', 'a certain', 'each'],
    'an': ['a', 'one', 'a single', 'some', 'any', 'a certain', 'each'],
    'the': ['this', 'that', 'these', 'those', 'said', 'such', 'particular'],

    # Pronouns
    'i': ['me', 'myself', 'the speaker', 'this person', 'yours truly', 'the writer', 'one'],
    'you': ['the reader', 'yourself', 'the listener', 'one', 'you all', 'everyone', 'thee'],
    'he': ['him', 'the man', 'that person', 'the individual', 'this male', 'the guy', 'himself'],
    'she': ['her', 'the woman', 'that person', 'the individual', 'this female', 'the lady', 'herself'],
    'we': ['us', 'our group', 'the team', 'ourselves', 'the collective', 'our side', 'the folks'],
    'they': ['them', 'those people', 'the group', 'the individuals', 'those folks', 'the others', 'themselves'],
    'it': ['this', 'that', 'the thing', 'the item', 'the subject', 'the object', 'this matter'],

    # Auxiliary Verbs
    'is': ['exists as', 'remains', 'stands as', 'is being', 'serves as', 'acts as', 'functions as'],
    'are': ['exist as', 'remain', 'stand as', 'are being', 'serve as', 'act as', 'function as'],
    'was': ['existed as', 'remained', 'stood as', 'was being', 'served as', 'acted as', 'functioned as'],
    'were': ['existed as', 'remained', 'stood as', 'were being', 'served as', 'acted as', 'functioned as'],
    'have': ['possess', 'own', 'hold', 'contain', 'bear', 'carry', 'maintain'],
    'has': ['possesses', 'owns', 'holds', 'contains', 'bears', 'carries', 'maintains'],
    'had': ['possessed', 'owned', 'held', 'contained', 'bore', 'carried', 'maintained'],
    'do': ['perform', 'execute', 'complete', 'carry out', 'accomplish', 'undertake', 'implement'],
    'does': ['performs', 'executes', 'completes', 'carries out', 'accomplishes', 'undertakes', 'implements'],
    'did': ['performed', 'executed', 'completed', 'carried out', 'accomplished', 'undertook', 'implemented']
}

# PDF text extraction
def extract_text_from_pdf(pdf_bytes):
    doc = fitz.open(stream=pdf_bytes, filetype="pdf")
    text = ''
    for page in doc:
        text += page.get_text()
    doc.close()
    return text

# Text chunking (increased chunk size to ensure entire document is processed)
def chunk_text(text, chunk_size=500):  # Increased to 500 characters to capture more content
    sentences = text.split('. ')
    chunks, chunk = [], ''
    for sentence in sentences:
        if len(chunk) + len(sentence) <= chunk_size:
            chunk += sentence + '. '
        else:
            chunks.append(chunk.strip())
            chunk = sentence + '. '
    if chunk:
        chunks.append(chunk.strip())
    return chunks

# Paraphrasing functions
def simple_paraphrase(text_chunk):
    words = text_chunk.lower().split()
    paraphrased_words = [random.choice(synonym_dict.get(word, [word])) for word in words]
    return ' '.join(paraphrased_words)

def academic_paraphrase(text_chunk):
    words = text_chunk.lower().split()
    paraphrased_words = []
    for word in words:
        synonym = random.choice(synonym_dict.get(word, [word]))
        if word in ['research', 'study', 'analysis', 'data', 'findings', 'investigation', 'experiment', 'survey', 'conclusion']:
            synonym = synonym.capitalize()  # Capitalize for academic tone
        paraphrased_words.append(synonym)
    return ' '.join(paraphrased_words)

def creative_paraphrase(text_chunk):
    words = text_chunk.lower().split()
    paraphrased_words = []
    for word in words:
        synonym = random.choice(synonym_dict.get(word, [word]))
        if random.random() > 0.7 and word in ['content', 'message', 'information']:
            synonym = f"vibrant {synonym}"  # Creative flair
        paraphrased_words.append(synonym)
    sentences = text_chunk.split('. ')
    random.shuffle(sentences)
    return ' '.join(paraphrased_words)

def grammar_check(text_chunk):
    sentences = text_chunk.split('. ')
    corrected_sentences = [s.capitalize().strip() + '.' for s in sentences if s.strip()]
    return ' '.join(corrected_sentences)

def random_paraphrase(text_chunk):
    words = text_chunk.lower().split()
    paraphrased_words = [random.choice(synonym_dict.get(word, [word])) for word in words]
    random.shuffle(paraphrased_words)
    return ' '.join(paraphrased_words)

# Process with user-chosen method
def process_with_method(pdf_text, method):
    text_chunks = chunk_text(pdf_text)
    paraphrased_text = ''
    for chunk in text_chunks:
        if method == 'simple':
            paraphrased_text += simple_paraphrase(chunk) + ' '
        elif method == 'academic':
            paraphrased_text += academic_paraphrase(chunk) + ' '
        elif method == 'creative':
            paraphrased_text += creative_paraphrase(chunk) + ' '
        elif method == 'grammar':
            paraphrased_text += grammar_check(chunk) + ' '
        elif method == 'random':
            paraphrased_text += random_paraphrase(chunk) + ' '
        else:
            return "Invalid method selected."
    return paraphrased_text

# Home route for the frontend
@app.get("/")
async def home(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

# Paraphrase endpoint with user-chosen method
@app.post("/paraphrase")
async def paraphrase_pdf(file: UploadFile = File(...), method: str = Form(...)):
    try:
        start_time = time()
        max_size = 10 * 1024 * 1024  # 10 MB limit
        pdf_bytes = await file.read()
        if len(pdf_bytes) > max_size:
            raise HTTPException(status_code=413, detail="File too large. Maximum size is 10 MB.")
        if not file.filename.endswith('.pdf'):
            raise HTTPException(status_code=400, detail="Please upload a PDF file.")
        original_text = extract_text_from_pdf(pdf_bytes)
        if not original_text.strip():
            raise HTTPException(status_code=400, detail="The PDF contains no extractable text.")

        valid_methods = ['simple', 'academic', 'creative', 'grammar', 'random']
        if method not in valid_methods:
            raise HTTPException(status_code=400, detail="Invalid method. Choose from: simple, academic, creative, grammar, random.")

        paraphrased_text = process_with_method(original_text, method)
        processing_time = time() - start_time
        print(f"PDF processed with {method} paraphrase in {processing_time:.2f} seconds.")
        print(f"Total text extracted: {len(original_text)} characters")
        return {"paraphrased_text": paraphrased_text, "method": method.capitalize() + " Paraphrase"}
    except HTTPException as e:
        return {"error": e.detail}
    except Exception as e:
        return {"error": f"An unexpected issue occurred - {str(e)}"}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)